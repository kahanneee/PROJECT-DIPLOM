import pytest
import allure
import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

@allure.feature("Тест на SQL инъекцию")
#атака, в которой злоумышленник вставляет код в запрос к базе данных, чтобы получить несонкционированный доступ к данным
def test_sql_injection():
    url = "https://ormea.pl/ru/"  

    sql_payload = "' OR '1'='1"

    with allure.step("Отправка запроса с SQL-пейлоудом"):
        response = requests.get(url, params={"q": sql_payload})
    
    with allure.step("Проверка наличия SQL инъекции"):
        assert "SQL syntax" not in response.text, "SQL инъекция обнаружена"
        assert response.status_code == 200, "Запрос завершился с ошибкой"

@allure.feature("Проверка использования безопасных протоколов")
def test_https_protocol():
    url = "https://ormea.pl/"
    
    with allure.step("Проверка использования HTTPS"):
        response = requests.get(url)
    
    with allure.step("Проверка, что URL использует HTTPS"):
        assert response.url.startswith("https://"), "Сайт не использует HTTPS"
        assert response.status_code == 200, "Запрос завершился с ошибкой"

@allure.feature("Проверка конфигурации серверов")
def test_server_configuration():
    urls_to_check = [
        "https://ormea.pl/.env",
        "https://ormea.pl/.git",
        "https://ormea.pl/config.php",
        "https://ormea.pl/phpinfo.php"
    ]
    
    for url in urls_to_check:
        with allure.step(f"Проверка доступа к {url}"):
            response = requests.get(url)
            
            with allure.step(f"Проверка, что {url} недоступен"):
                assert response.status_code in [403, 404], f"Файл {url} доступен, что является уязвимостью"                        

@allure.feature("Тест на уязвимость к Directory Traversal атакам")
def test_directory_traversal_vulnerability():
    url = "https://ormea.pl/ru/download"
    traversal_payload = "../../../../etc/passwd"
    response = requests.get(url, params={"file": traversal_payload})
    assert "root:x" not in response.text, "Directory Traversal уязвимость обнаружена"
    assert response.status_code == 403, "Запрос завершился с ошибкой"
                                          
@allure.feature("Тест на уязвимость к кликджекингу") #упавший тест, тк есть уязвимость 
def test_clickjacking():
    driver = webdriver.Chrome()
    driver.get("https://ormea.pl/ru/")
    
    with allure.step("Проверка защиты от кликджекинга"):
        frames = driver.find_elements(By.TAG_NAME, "iframe")
        assert len(frames) == 0, "Кликджекинг уязвимость обнаружена"

    driver.quit()